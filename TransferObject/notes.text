there are 4 properties to transform object
    *scale
    *roatation
    *position
    *quaternion


    *** the perspectivecamera inherit the properties from camera that inherit from object 3d
    *** mesh also inherit the properties from object3d

    ********************************matrices******************* 

    *** move objects
    we have 3 proerties 
    x
    y
    z


    use mesh.position.x/y/z=value

    
    and use wherever but you should use before rendering and after creation the mesh

    //VECTOR
    Vectors in Three.js are mathematical objects used to represent points or directions in 3D space. They are commonly used for operations like positioning, scaling, and rotating objects. The most frequently used vector class is `Vector3`, which represents a 3D vector with x, y, and z components.

    - Vectors can be used to set or manipulate object positions, directions, or transformations.
    - Example: `mesh.position` is a `Vector3` object that defines the position of a mesh in 3D space.
    - Operations like addition, subtraction, normalization, and cross products can be performed using vector methods.

    // mesh.position.lenght()
    the distance between center of the scene and position of the object

    //mesh.position.distanceTo(camera.position)
    the distance between camera and the object

    //Normalize
    when we do the normalize it reducecs the length to 1 no matter the object distance is what
    mesh.position.normalize()


    set
    giving position in one line using set rather than using x y z seperately

    mesh.position.set(x,y,z)

    Axes Helper
    for positioning the object it helps more
    by creating const Axeshelper = new Three.AxesHelper(we can passs [parameter])
    scene.add(Axeshelper)
    paramete reprsents size of the helper axis

    //scale
    /**
     * The `scale` property in Three.js is used to control the scaling of an object
     * along the x, y, and z axes. It is represented as a `Vector3` object, where
     * each component corresponds to the scale factor for the respective axis.
     *
     * - `scale.x`: Controls the scaling along the x-axis.
     * - `scale.y`: Controls the scaling along the y-axis.
     * - `scale.z`: Controls the scaling along the z-axis.
     *
     * Notes:
     * - A scale value of `1` means no scaling (default size).
     * - A scale value greater than `1` enlarges the object along the respective axis.
     * - A scale value between `0` and `1` shrinks the object along the respective axis.
     * - A scale value of `0` effectively makes the object invisible along the respective axis.
     * - Negative scale values can be used to flip the object along the respective axis.
     *
     * Example:
     * ```javascript
     * object.scale.set(2, 1.5, 1); // Scales the object by 2x on x-axis, 1.5x on y-axis, and keeps z-axis unchanged.
     * ```
     */


    // Rotation
    /**
     * The `rotation` property in Three.js is used to control the rotation of an object
     * around the x, y, and z axes. It is represented as an `Euler` object, where each
     * component corresponds to the rotation angle (in radians) for the respective axis.
     *
     * - `rotation.x`: Controls the rotation around the x-axis.
     * - `rotation.y`: Controls the rotation around the y-axis.
     * - `rotation.z`: Controls the rotation around the z-axis.
     *
     * Notes:
     * - Rotation angles are specified in radians (not degrees).
     * - The order of rotation is determined by the `Euler` order (default is 'XYZ').
     * - Changing the rotation order can affect the final orientation of the object.
     *
     * Example:
     * ```javascript
     * mesh.rotation.x = Math.PI / 4; // Rotates the object 45 degrees around the x-axis.
     * mesh.rotation.y = Math.PI / 2; // Rotates the object 90 degrees around the y-axis.
     * ```
     we can change the order by mesh.rotation.reorder('YXZ');
     */

    // Quaternion
    /**
     * The `quaternion` property in Three.js is used to represent the orientation of an object
     * in 3D space. It is an alternative to using Euler angles for rotation and avoids issues
     * like gimbal lock.
     *
     * - A quaternion is a mathematical representation of rotation that consists of four components:
     *   `x`, `y`, `z`, and `w`.
     * - Quaternions are commonly used for smooth interpolations (slerp) and complex rotations.
     *
     * Notes:
     * - Quaternions are more efficient and stable for cumulative rotations compared to Euler angles.
     * - You can set the quaternion directly or use methods like `setFromAxisAngle` or `setFromEuler`.
     * - When using quaternions, avoid directly modifying the `rotation` property, as it may lead to conflicts.
     *
     * Example:
     * ```javascript
     * const axis = new THREE.Vector3(0, 1, 0); // Rotation axis (y-axis)
     * const angle = Math.PI / 4; // Rotation angle (45 degrees)
     * mesh.quaternion.setFromAxisAngle(axis, angle); // Sets the quaternion for the rotation
     * ```
     */

    camera.lookAt(mesh.position)
