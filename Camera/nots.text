Orthographic Camera
- The OrthographicCamera provides a non-perspective view, where objects appear the same size regardless of their distance from the camera.
- It is useful for 2D scenes or technical visualizations.

Syntax
- const camera = new THREE.OrthographicCamera(left, right, top, bottom, near, far);
- left, right, top, bottom: Define the camera's view box.
- near: Near clipping plane.
- far: Far clipping plane.

Example
const camera = new THREE.OrthographicCamera(-10*aspectRatio, 10*aspectRatio, 10, -10, 0.1, 100);
 use aspect ratio fo more bettter visibility

 const aspectRatio = sizes.width / sizes.height


Custom Camera
-
const cursor ={
    x:0,
    y:0
}

window.addEventListener("mousemove",(dets)=>{
    cursor.x = dets.clientX /sizes.width - 0.5
    console.log(cursor.x)
    cursor.y = -(dets.clientY /sizes.height - 0.5)

})


function tick (){
    renderer.render(scene, camera)
      camera.position.x =cursor.x *10
      camera.position.y =cursor.y*10
      camera.lookAt(mesh.position)
   
    window.requestAnimationFrame(tick)

    
}
tick()

ðŸ“Œ OrbitControls (Three.js)
âœ… What is it?
OrbitControls lets you move the camera around your 3D scene by clicking, dragging, zooming, or rotating â€” like orbiting around an object with your mouse.

Without it, the camera stays fixed, and you have to move it manually with code. With OrbitControls, the user can interact and explore the scene smoothly.

import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

const controls = new OrbitControls(camera, renderer.domElement);

âœ… What can you do with it?

Rotate: drag the mouse left/right, up/down.

Zoom: scroll the mouse wheel.

Pan (move side-to-side): right-click and drag.

Enable/disable: control what interactions are allowed.

import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

// Scene, camera, renderer setup
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Add a cube
const geometry = new THREE.BoxGeometry();
const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
const cube = new THREE.Mesh(geometry, material);
scene.add(cube);

// Camera position
camera.position.z = 5;

// Add OrbitControls
const controls = new OrbitControls(camera, renderer.domElement);

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    controls.update();  // **important!**
    renderer.render(scene, camera);
}
animate();


âœ… Important Points

Always call controls.update() inside the animation loop.

You can tweak settings, like:

js
Copy
Edit
controls.enableZoom = false;  // disables zooming
controls.enablePan = false;   // disables panning
controls.autoRotate = true;   // makes the camera spin automatically
If you want, I can also provide:
âœ… All the common settings/options you can adjust
âœ… An example with auto-rotation or damping effects

Would you like me to write those next?
